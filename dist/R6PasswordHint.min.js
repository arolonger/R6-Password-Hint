var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var R6PasswordHint = function () {
    function R6PasswordHint(params) {
        _classCallCheck(this, R6PasswordHint);

        this.builtInRules = ["smallLetter", "bigLetter", "digit", "lengthBetween"];
        this.inputField = params.inputField;
        this.hintScope = document.getElementById("R6PasswordHint-" + this.inputField.id);

        this.selectedRulesState = this._rulesSelectedByUser(params.rules);
        this.domElements = this._getDomElements();

        console.log(this.selectedRulesState);
        this._addEventListener();
    }

    _createClass(R6PasswordHint, [{
        key: "_getDomElements",
        value: function _getDomElements() {
            var result = {};

            for (var rule in this.selectedRulesState) {
                result[rule] = this.hintScope.querySelector(".js-R6PasswordHint-" + rule);
            }

            return result;
        }
    }, {
        key: "_rulesSelectedByUser",
        value: function _rulesSelectedByUser(rules) {
            var state = {};

            this.builtInRules.forEach(function (value) {
                if (rules[value] !== undefined) {
                    //build-in rule
                    state[value] = {
                        "counter": 0,
                        "shouldBe": rules[value]
                    };
                } else {
                    //customRule - TODO
                }
            });

            return state;
        }
    }, {
        key: "_addEventListener",
        value: function _addEventListener() {
            this.inputField.addEventListener("keyup", this._inputChanged.bind(this));
        }
    }, {
        key: "_inputChanged",
        value: function _inputChanged() {
            this._refreshState();
            this._isConditionsFulfilled();
        }
    }, {
        key: "_refreshSmallLetterRuleState",
        value: function _refreshSmallLetterRuleState(value) {
            var smallLetters = value.match(/[a-z]/g);
            var smallLettersCounter = smallLetters !== null ? smallLetters.length : 0;
            this.selectedRulesState.smallLetter.counter = smallLettersCounter;
        }
    }, {
        key: "_refreshBigLetterRuleState",
        value: function _refreshBigLetterRuleState(value) {
            var bigLetters = value.match(/[A-Z]/g);
            var bigLetterCounter = bigLetters !== null ? bigLetters.length : 0;
            this.selectedRulesState.bigLetter.counter = bigLetterCounter;
        }
    }, {
        key: "_refreshDigitLetterRuleState",
        value: function _refreshDigitLetterRuleState(value) {
            var digits = value.match(/[0-9]/g);
            var digitCounter = digits !== null ? digits.length : 0;
            this.selectedRulesState.digit.counter = digitCounter;
        }
    }, {
        key: "_refreshLengthBetweenRuleState",
        value: function _refreshLengthBetweenRuleState(value) {
            var lengthBetween = value !== "" ? value.length : 0;
            this.selectedRulesState.lengthBetween.counter = lengthBetween;
        }
    }, {
        key: "_refreshState",
        value: function _refreshState() {
            var value = this.inputField.value;

            if (this.selectedRulesState["smallLetter"]) {
                this._refreshSmallLetterRuleState(value);
            }

            if (this.selectedRulesState["bigLetter"]) {
                this._refreshBigLetterRuleState(value);
            }

            if (this.selectedRulesState["digit"]) {
                this._refreshDigitLetterRuleState(value);
            }

            if (this.selectedRulesState["lengthBetween"]) {
                this._refreshLengthBetweenRuleState(value);
            }
        }
    }, {
        key: "_isConditionsFulfilled",
        value: function _isConditionsFulfilled() {
            for (var rule in this.selectedRulesState) {
                if (rule === "lengthBetween") {
                    if (this.selectedRulesState[rule].counter >= this.selectedRulesState[rule].shouldBe[0] && this.selectedRulesState[rule].counter <= this.selectedRulesState[rule].shouldBe[1]) {
                        this._toggleClass(rule, true);
                    } else {
                        this._toggleClass(rule, false);
                    }
                } else if (this.selectedRulesState[rule].counter >= this.selectedRulesState[rule].shouldBe) {
                    this._toggleClass(rule, true);
                } else {
                    this._toggleClass(rule, false);
                }
            }
        }
    }, {
        key: "_toggleClass",
        value: function _toggleClass(ruleName, action) {
            var element = this.domElements[ruleName];

            if (action) {
                element.classList.add("R6PasswordHint-ok");
            } else {
                element.classList.remove("R6PasswordHint-ok");
            }
        }
    }]);

    return R6PasswordHint;
}();
//# sourceMappingURL=R6PasswordHint.js.map
